type Query {
  posts: PostsResponse!
  postBySlug(input: PostBySlugInput!): PostBySlugResponse!
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostResponse!
  deletePost(input: DeletePostInput!): DeletePostResponse!
  editPostContent(input: EditPostContentInput!): EditPostContentResponse!
}

type PostsResponse {
  edges: [ConnectionEdge!]!
}

type ConnectionEdge {
  node: ConnectionNode!
}

interface ConnectionNode {
  id: ID!
}

input CreatePostInput {
  slug: String!
}

type CreatePostResponse {
  post: Post
}

input DeletePostInput {
  slug: String!
}

type DeletePostResponse {
  post: Post
}

input EditPostContentInput {
  slug: String!
  markdown: String!
}

type EditPostContentResponse {
  post: Post
}

type Post implements ConnectionNode {
  id: ID!
  slug: String!
  content: PostContent!
}

type PostContent {
  markdown: String!
}

input PostBySlugInput {
  slug: String!
}

type PostBySlugResponse {
  post: Post
}
